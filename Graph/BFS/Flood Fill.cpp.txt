class Solution {
public:
// dfs
    void fillColor(int i, int j, vector<vector<int>>& image, int color, int initColor) {
        image[i][j] =color;
        

        int row[] = {-1, 0, +1, 0};
        int col[] = {0, +1, 0, -1};

        for(int idx = 0; idx < 4 ;idx++) {
            int nrow = i + row[idx];
            int ncol = j + col[idx];

            if(nrow>=0 && nrow < image.size() && ncol >= 0 && ncol < image[0].size() && image[nrow][ncol]==initColor && image[nrow][ncol]!=color ) {
                
                
                fillColor(nrow, ncol, image, color, initColor);
                

            }
        }

    }


    // BFS
    void fillColorBFS(int i, int j, vector<vector<int>>& image, int color, int initColor) {

        int n = image.size();
        int m = image[0].size();

        queue<pair<int,int>> q;

        q.push({i, j});

        int row[] = {-1, 0, +1, 0};
        int col[] = {0, +1, 0, -1};

        while(!q.empty()) {

            auto node = q.front();
            q.pop();

            int i = node.first;
            int j = node.second;

            image[i][j] = color;

            for(int idx = 0; idx < 4 ;idx++) {
            int nrow = i + row[idx];
            int ncol = j + col[idx];

             if(nrow>=0 && nrow < image.size() && ncol >= 0 && ncol < image[0].size() && image[nrow][ncol]==initColor && image[nrow][ncol]!=color ) {
                q.push({nrow, ncol});
             }





            }



        }
    }

    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        vector<vector<int>> vis(image.size(), vector<int>(image[0].size(),0));

        int initColor = image[sr][sc];
        // fillColor(sr, sc, image, color, initColor);
        fillColorBFS(sr,sc, image, color, initColor);

        return image;

        
    }
};