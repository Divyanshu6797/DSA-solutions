class Solution {
public:

    

    int recursion(int i1, int i2, string text1, string text2) {
        if(i1 == text1.size() || i2 == text2.size()) {
            return 0;
        }

        if(text1[i1] == text2[i2]) {
            return 1 + recursion(i1+1, i2+1, text1, text2);

        }
        else return max(recursion(i1, i2+1, text1, text2), recursion(i1+1, i2, text1, text2));
    }


    int memo(int i1, int i2, string &text1, string &text2, vector<vector<int>> &dp) {
        if(i1 == text1.size() || i2 == text2.size()) {
            return 0;
        }
        if(dp[i1][i2] != -1)   return dp[i1][i2];

        int ans = 0;
        if(text1[i1] == text2[i2]) {
            ans =  1 + memo(i1+1, i2+1, text1, text2, dp);

        }
        else ans =  max(memo(i1, i2+1, text1, text2, dp), memo(i1+1, i2, text1, text2, dp));

        return dp[i1][i2] = ans;
    }

    int tabulation(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();

        vector<vector<int>> dp(n1+1, vector<int>(n2+1,0));

        for(int i1 = n1-1;i1 >= 0 ;i1--) {
            for(int i2 = n2-1; i2 >= 0; i2--) {

                int ans = 0;
                if(text1[i1] == text2[i2]) {
                    ans =  1 + dp[i1+1][i2+1];

                }
                else {
                    ans =  max(dp[i1][i2+1], dp[i1+1][i2]);
                }

        dp[i1][i2] = ans;

            }
        }
        return dp[0][0];
    }


    int longestCommonSubsequence(string text1, string text2) {

        int n1 = text1.size();
        int n2 = text2.size();

        // return recursion(0,0,text1, text2);

        // vector<vector<int>> dp(n1,vector<int>(n2,-1));

        // return memo(0,0,text1,text2, dp);


        return tabulation(text1, text2);
        
        
    }
};